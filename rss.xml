<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/">
    <channel>
        <title></title>
        <link>undefined</link>
        <description>undefined</description>
        <lastBuildDate>Mon, 10 Jun 2024 16:35:48 GMT</lastBuildDate>
        <docs>https://validator.w3.org/feed/docs/rss2.html</docs>
        <generator>Joplin Pages Publisher</generator>
        <item>
            <title><![CDATA[Exercices basiques]]></title>
            <guid>943f24b973d240b2ba4a6c132f26bf33</guid>
            <pubDate>Sun, 09 Jun 2024 15:48:57 GMT</pubDate>
            <content:encoded><![CDATA[<h2 id="exercices-simples-de-programmation-en-langage-python">Exercices simples de programmation en langage Python</h2>
<hr />
<p><strong>Exercice :</strong></p>
<p>Écrire une fonction en Python qui prend en entrée un entier positif n et qui renvoie la somme des carrés des entiers de 1 à n.</p>
<p>Par exemple, pour n = 3, la fonction devrait renvoyer 1^2 + 2^2 + 3^2 = 14.</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend en entrée une liste d’entiers et qui renvoie la liste des éléments uniques de la liste initiale, c’est-à-dire les éléments qui n’apparaissent qu’une seule fois.</p>
<p>Par exemple, pour une liste [1, 2, 3, 2, 4, 5, 1], la fonction devrait renvoyer [3, 4, 5].</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend en entrée un entier n et qui renvoie la liste des nombres premiers inférieurs ou égaux à n.</p>
<p>Par exemple, pour n = 10, la fonction devrait renvoyer la liste [2, 3, 5, 7].</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui simule le lancer d’un dé équilibré à 6 faces. La fonction devrait prendre en entrée le nombre de lancers à effectuer et renvoyer la fréquence d’apparition de chaque face du dé après ces lancers.</p>
<p>Par exemple, si vous lancez le dé 100 fois, la fonction pourrait retourner quelque chose du genre :
Face 1 : 15%
Face 2 : 20%
Face 3 : 18%
Face 4 : 17%
Face 5 : 25%
Face 6 : 5%</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui simule le lancer de deux dés équilibrés à 6 faces chacun. La fonction devrait simuler le lancer de ces deux dés un grand nombre de fois (par exemple, 1000 lancers) et calculer la fréquence relative de la somme des deux dés pour chaque valeur possible (de 2 à 12).</p>
<p>Par exemple, après 1000 lancers, vous pourriez obtenir quelque chose comme ceci :
Somme 2 : 3%
Somme 3 : 6%
…
Somme 12 : 2%</p>
<hr />
<p><strong>Exercice</strong> :
Étant donnée une matrice carrée A de taille nxn, écrire une fonction en Python qui détermine si la matrice A est inversible ou non. Si la matrice est inversible, la fonction devrait renvoyer sa matrice inverse, sinon elle devrait renvoyer un message indiquant que la matrice n’est pas inversible.</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend en entrée deux matrices A et B et vérifie si ces deux matrices sont égales. Les matrices A et B seront représentées sous forme de listes de listes, où chaque liste interne représente une ligne de la matrice.</p>
<p>Par exemple, pour les matrices A = [[1, 2], [3, 4]] et B = [[1, 2], [3, 4]], la fonction devrait renvoyer True car les deux matrices sont égales.</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend une chaîne de caractères en entrée, puis renvoie le nombre de mots différents présents dans cette chaîne. Les mots sont séparés par des espaces et la casse (majuscules/minuscules) doit être ignorée. Les mots sont considérés comme différents même s’ils ne diffèrent que par la casse.</p>
<p>Par exemple, pour la chaîne “Bonjour bonjour tout le monde”, la fonction devrait renvoyer 4, car il y a 4 mots différents (“bonjour”, “tout”, “le”, “monde”).</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend deux chaînes de caractères en entrée et qui détermine si elles sont des anagrammes l’une de l’autre. Deux chaînes sont des anagrammes si elles contiennent les mêmes caractères, avec le même nombre d’occurrences, mais dans un ordre différent. Ignorez les espaces et la casse lors de la comparaison.</p>
<p>Par exemple, pour les chaînes “Clint Eastwood” et “Old West action”, la fonction devrait renvoyer True car ce sont des anagrammes.</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend une chaîne de caractères en entrée et qui détermine si cette chaîne est un pangramme. Un pangramme est une phrase contenant au moins une fois chaque lettre de l’alphabet. Ignorez les espaces et la casse pendant la vérification.</p>
<p>Par exemple, pour la phrase “Le vif zéphyr jubile sur les kumquats” la fonction devrait renvoyer True car c’est un pangramme.</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui implémente la méthode de la dichotomie pour trouver une approximation d’une racine d’une équation dans un intervalle donné. Vous pouvez choisir une équation simple comme x^2 - 2 = 0 par exemple, et rechercher la racine carrée de 2 dans un intervalle approprié. La fonction devrait prendre en entrée la fonction à évaluer, les bornes de l’intervalle et la précision souhaitée, et renvoyer l’approximation de la racine</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend une chaîne de caractères en entrée et qui renvoie toutes les permutations possibles des caractères de la chaîne. Assurez-vous de ne pas inclure les doublons, c’est-à-dire que chaque permutation doit être unique.</p>
<p>Par exemple, pour la chaîne “ABC”, la fonction devrait renvoyer une liste des permutations uniques comme [‘ABC’, ‘ACB’, ‘BAC’, ‘BCA’, ‘CAB’, ‘CBA’].</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend deux matrices carrées en entrée et qui vérifie si elles sont inverses l’une de l’autre. Deux matrices A et B sont inverses si leur produit AB est égal à la matrice identité, c’est-à-dire que AB = I où I est la matrice identité. Vous pouvez utiliser des matrices simples comme des matrices 2x2 pour cet exercice.</p>
<p>Par exemple, si A = [[1, 2], [3, 4]] et B = [[-2, 1], [1.5, -0.5]], la fonction devrait vérifier que AB = I, où I est la matrice identité 2x2.</p>
<hr />
<p><strong>Exercice</strong> :
Écrire une fonction en Python qui prend une matrice carrée symétrique en entrée et qui vérifie si cette matrice est diagonalisable. Si la matrice est diagonalisable, la fonction devrait renvoyer les valeurs propres et les vecteurs propres associés.</p>
<p>Par exemple, pour une matrice symétrique comme :
[[2, 1, 1],
[1, 3, 2],
[1, 2, 4]]</p>
<p>La fonction devrait calculer les valeurs propres (valeurs propres) et les vecteurs propres associés permettant de diagonaliser la matrice.</p>
<hr />
<p><strong>Exercice</strong> : Gestion des étudiants</p>
<p>Vous devez créer un programme en Python qui permet de gérer une liste d’étudiants. Chaque étudiant est représenté par son nom et sa moyenne. Le programme doit offrir les fonctionnalités suivantes :</p>
<p>-Ajouter un nouvel étudiant avec son nom et sa moyenne.
-Afficher la liste de tous les étudiants avec leur nom et leur moyenne.
-Rechercher un étudiant par son nom et afficher sa moyenne.
-Supprimer un étudiant de la liste.
Utilisez un dictionnaire pour stocker les informations des étudiants (nom comme clé et moyenne comme valeur).</p>
<hr />
<p><strong>Exercice</strong> : Simulation d’une loi binomiale</p>
<p>En probabilités et statistiques, la loi binomiale est une loi de probabilité discrète qui décrit le nombre de succès dans une séquence de n essais indépendants entre eux, avec une probabilité fixe p de succès à chaque essai.</p>
<p>Votre tâche est de simuler une loi binomiale en utilisant le langage de programmation Python. Vous pouvez utiliser le paquetage random pour cela.</p>
<p>Description de l’exercice :</p>
<p>Écrivez une fonction simulate_binomial(n, p) qui prend en entrée deux paramètres :</p>
<p>n : le nombre d’essais (un entier positif)
p : la probabilité de succès à chaque essai (un nombre réel entre 0 et 1)
La fonction doit renvoyer le nombre de succès dans les n essais.</p>
<p>Je suis là pour vous aider si vous rencontrez des difficultés. Bonne chance !</p>
<p>Note : Cet exercice est destiné à des étudiants de niveau Bac +1 ou Bac +2 en mathématiques et informatique. Il nécessite une bonne compréhension des probabilités discrètes et du langage de programmation Python.</p>
<hr />
<p><strong>Exercice : Validation de la conjecture de Collatz</strong></p>
<p>La conjecture de Collatz, également connue sous le nom de problème de Syracuse, est une hypothèse mathématique non résolue. Voici comment elle est formulée :</p>
<p>Prenez un nombre entier positif n.
Si n est pair, divisez-le par 2.
Si n est impair, multipliez-le par 3 et ajoutez 1.
Répétez le processus avec le nouveau nombre obtenu, et ainsi de suite.
La conjecture suggère que, quel que soit le nombre entier positif de départ, le processus finira toujours par atteindre 1.</p>
<p>Votre tâche consiste à écrire une fonction en Python qui prend un entier positif n en entrée et vérifie la conjecture de Collatz jusqu’à ce que le processus atteigne 1. La fonction devrait renvoyer le nombre total d’étapes nécessaires pour atteindre 1 à partir de n.</p>
<hr />
]]></content:encoded>
        </item>
        <item>
            <title><![CDATA[Fonctionnement]]></title>
            <guid>162940f5e3d14c52b97a23dcb39b1b4b</guid>
            <pubDate>Sat, 08 Jun 2024 08:05:02 GMT</pubDate>
            <content:encoded><![CDATA[<p><strong>Bienvenue !</strong></p>
<p>pas d’informations pour l’instant !</p>
<p><img src="/_resources/0141cb35047348f19c9bf7dfd5114b77.png" /></p>
]]></content:encoded>
        </item>
    </channel>
</rss>